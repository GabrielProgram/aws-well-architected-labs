<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quest: Simplest Security Steps on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/</link><description>Recent content in Quest: Simplest Security Steps on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 11 May 2021 11:16:08 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/index.xml" rel="self" type="application/rss+xml"/><item><title>Step 1 - Protect privileged credentials</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/1_protect_privileged_credentials/</link><pubDate>Tue, 11 May 2021 11:09:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/1_protect_privileged_credentials/</guid><description>In this exercise we will use AWS Identity &amp;amp; Access Management (IAM) in the AWS Management Console to configure and enable a virtual multi factor authentication (MFA) device for the root. To manage MFA devices for the AWS account, you must be signed in to AWS using your root user credentials. You cannot manage MFA devices for the root user using other credentials.
Use your AWS account email address and password to sign in as the AWS account root user to the IAM console at https://console.</description></item><item><title>Step 2 - Use temporary credentials</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/2_use_temporary_credentials/</link><pubDate>Tue, 11 May 2021 01:20:06 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/2_use_temporary_credentials/</guid><description>In this exercise we will use AWS IAM Roles to avoid the usage of AWS IAM access keys that may be required by the Amazon ELastic Compute Cloud (EC2) instance to access AWS resources. We will create a Role and assigned it to EC2 instance, instead of hard coding the access keys within the EC2 instance.
Note: For this lab, it is assumed that EC2 instance is already created with default settings.</description></item><item><title>Step 3 - Replace hardcoded credentials</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/3_replace_hardcoded_credentials/</link><pubDate>Tue, 11 May 2021 01:25:03 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/3_replace_hardcoded_credentials/</guid><description>In this exercise we will use AWS Secrets Manager to easily manage and retrieve credentials i.e., username/passwords, API Keys and other secrets through their Lifecyle.
As a Pre-requisite this lab requires Amazon Relational Database Service (RDS) MySQL server, Amazon Elastic Container Service (ECS) cluster (with a container-based application), Amazon Elastic Container Registry (ECR).
From the AWS console, click Services and select Secrets Manager.
On the Secrets Manager console click on Store a new secret.</description></item><item><title>Step 4 - Limit Network Access</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/4_limit_network_access/</link><pubDate>Tue, 11 May 2021 01:55:07 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/4_limit_network_access/</guid><description>In this exercise we will use AWS Trusted Advisor&amp;rsquo;s basic security checks to identify remote access risks associated with the EC2 instance and fix them. Furthermore, we will use AWS Systems Manager&amp;rsquo;s feature to secure our remote access.
Note: For this lab, it is assumed that Microsoft Windows based EC2 instance is already created with default settings. For instructions to create EC2 Instance please follow the link .
From the AWS console, click Services and select Trusted Advisor.</description></item><item><title>Step 5 - Apply patches</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/5_apply_patches/</link><pubDate>Tue, 11 May 2021 02:06:01 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/5_apply_patches/</guid><description>In this exercise we will perform vulnerability scanning and patching on a pre-install EC2 instance, Microsoft based Windows Operating System using Amazon Inspector and AWS Systems Manager respectively.
Note: For this lab, it is assumed that Microsoft Windows based EC2 instance is already created. For instructions to create EC2 Instance please follow the link .
From the AWS console, click Services and select Amazon Inspector.
On the Inspector console click on Get started.</description></item><item><title>Step 6 - Restrict public storage</title><link>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/6_restrict_public_storage/</link><pubDate>Tue, 11 May 2021 02:20:08 -0400</pubDate><guid>https://wellarchitectedlabs.com/security/quests/quest_100_simplest_security_steps/6_restrict_public_storage/</guid><description>In this exercise we will configure S3 Block Public Access, an easy way to prevent public access to your S3 bucket.
From the AWS console, click Services and select S3.
Click the bucket name that you want to block public access.
Click on the Permissions tab.
Click Edit under the section &amp;lsquo;Block public access (bucket settings)&amp;rsquo;.
Select Block all public access to prevent all sort of public access to your bucket.</description></item></channel></rss>