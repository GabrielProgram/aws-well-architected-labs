<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Level 300: Splitting the CUR and Sharing Access on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/</link><description>Recent content in Level 300: Splitting the CUR and Sharing Access on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 24 Apr 2020 11:16:08 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup Output S3 Bucket</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/1_setup_s3_output/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/1_setup_s3_output/</guid><description>We need to provide a location to deliver the output from the Athena queries, so that it can be secured and restricted to the sub accounts. We&amp;rsquo;ll need to create the S3 bucket, and implement a Lambda function to re-write the object ACLs when new objects are delivered.
So what we&amp;rsquo;ll do is as follows:
Create the output S3 bucket with the required bucket policy Create an IAM policy that will allow a Lambda function to re-write object ACLs Implement the Lambda function 1 - Login to the consolve via SSO.</description></item><item><title>Perform one off Fill of Member/Linked Data</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/2_backfill_data/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/2_backfill_data/</guid><description>Perform this step if you want to generate data for all previous months available in your current CUR files. This is a one off step that is performed manually. We create a temporary table in Athena, and write the output to the S3 location created above, for the member/linked account to access it. We then delete the temporary table - which does not delete the S3 output data.
1 - In the management/payer account go into the Athena service dashboard</description></item><item><title>Create Athena Saved Queries to Write new Data</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/3_athena_queries/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/3_athena_queries/</guid><description>Next we setup your recurring Athena queries. These will run each time a new CUR file is delivered, separate out the information for the sub accounts, and write it to the output S3 location. These queries will be very similar to the one above, except it will only extract data for the current month.
You must write one query for the extraction of the data, which will create a temporary table, and then a second query to delete the table.</description></item><item><title>Create Lambda function to run the Saved Queries</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/4_lambda_function/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/4_lambda_function/</guid><description>This Lambda function ties everything together, it will remove all objects in the current months S3 folders, find the Athena queries to run, and then execute the saved Athena queries. First we will create the role with permissions for Lambda to use, then the Lambda function itself.
1 - Go to the IAM service dashboard
2 - Create a policy named LambdaSubAcctSplit
3 - Edit the following policy inline with security best practices, and add it to the policy:</description></item><item><title>Trigger the Lambda When a CUR is Delivered</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/5_trigger_lambda/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/5_trigger_lambda/</guid><description>It is assumed that you have completed 300_Automated_CUR_Updates_and_Ingestion, so there is an existing Lambda function that is being executed when a new CUR file is delivered. We will add code into this setup to trigger the new Lambda function.
1 - Go to the CloudFormation service Dashboard
2 - Select the current stack which updates the Glue database
3 - Download the current template (crawler-cfn.yml file), and save this for later (if Teardown is required)</description></item><item><title>Sub Account Crawler Setup</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/6_sub_acct/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/6_sub_acct/</guid><description>The final step is to setup the sub account to automatically scan the S3 folders each morning using a Glue Crawler, and update a local Athena database.
1 - Login to the sub account as an IAM user with the required permissions, and go into the Glue console.
2 - Add a Crawler with the following details:
Include path: the S3 bucket in the account with the delivered CURs Exclude patterns: **.</description></item><item><title>Tear Down</title><link>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/7_tear_down/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/cost/300_labs/300_splitting_sharing_cur_access/7_tear_down/</guid><description>We will tear down this lab, removing any data, resources and configuration that it created. We will restore any modified code or resources to their original state before the lab.
7.1 Sub Account 1 - Log into the sub account as an IAM user with the required privileges
2 - Go to the Glue service dashboard
3 - Delete the created database and tables
4 - Delete the recurring Glue crawler</description></item></channel></rss>