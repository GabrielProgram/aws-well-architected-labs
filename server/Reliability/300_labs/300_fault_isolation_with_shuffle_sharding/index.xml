<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Level 300: Fault Isolation with Shuffle Sharding on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/</link><description>Recent content in Level 300: Fault Isolation with Shuffle Sharding on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 07 Dec 2020 11:16:09 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy the workload</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/1_deploy_workload/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/1_deploy_workload/</guid><description>Traditionally most workloads are designed to withstand infrastructure failure by deploying workload components across multiple Availability Zones/Regions, implementing self-healing capabilities such as AutoScaling, etc. While such techniques are effective in ensuring uptime of workload resources, they do not address issues introduced at the workload application level (i.e. a software bug). Leveraging techniques like sharding and shuffle sharding will provide additional reliability to workloads by limiting the blast radius of failures so that only a subset of users are impacted by such failures.</description></item><item><title>Scope of Impact of failures</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/2_impact_of_failures/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/2_impact_of_failures/</guid><description>Break the application In the scenario used in the lab, the application has a known issue which is triggered by passing a &amp;ldquo;bad&amp;rdquo; query string. If such a request is received, the EC2 instance that handles the request will become unresponsive and the application will crash on the instance. The &amp;ldquo;bad&amp;rdquo; query string that triggers this is bug with a value of true. The development team is aware of this bug and are working on a fix, however, the issue exists today and customers might accidentally or intentionally trigger it.</description></item><item><title>Implement sharding</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/3_implement_sharding/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/3_implement_sharding/</guid><description>In this section you will update the architectural design of the workload and implement sharding. Similar to sharding a database where a large database or table is broken up into smaller chunks distributed across multiple servers, you will shard the overall capacity of the workload and segment it so that each shard is responsible for handling a subset of customers. By minimizing the number of &amp;ldquo;components&amp;rdquo; a single customer is able to interact with within the workload, we will be able to reduce the impact of a potential posion pill.</description></item><item><title>Impact of failures with sharding</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/4_impact_of_failures_sharding/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/4_impact_of_failures_sharding/</guid><description>Break the application You will now introduce the poison pill into the workload by including the bug query-string with your requests and see how the updated workload architecture handles it. As in the previous case, imagine that customer Alpha triggered the bug in the application again.
Include the query-string bug with a value of true and make a request as customer Alpha. The modified URL should look like this - http://shuffle-alb-1p2xbmzo541rr-1602891463.</description></item><item><title>Implement shuffle sharding</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/5_implement_shuffle_sharding/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/5_implement_shuffle_sharding/</guid><description>In this section you will update the architectural design of the workload and implement shuffle sharding. Shuffle sharding is a combinatorial implementation of a sharded architecture. With shuffle sharding you create virtual shards with a subset of the capacity of the workload ensuring that the virtual shards are mapped to a unique subset of customers with no overlap. By minimizing the number of Workers a single customer is able to interact with within the workload, and spreading resources in a combinatorial way, you will be able to further reduce the impact of a potential posion pill.</description></item><item><title>Impact of failures with shuffle sharding</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/6_impact_of_failures_shuffle_sharding/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/6_impact_of_failures_shuffle_sharding/</guid><description>Break the application You will now introduce the poison pill into the workload by including the bug query-string with your requests and see how the updated workload architecture handles it. As in the previous case, imagine that customer Alpha triggered the bug in the application again.
Include the query-string bug with a value of true and make a request as customer Alpha. The modified URL should look like this - http://shuffle-alb-1p2xbmzo541rr-1602891463.</description></item><item><title>Teardown</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/7_cleanup/</link><pubDate>Wed, 18 Nov 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/7_cleanup/</guid><description>If you are attending an in-person workshop and were provided with an AWS account by the instructor:
You should skip this step. Your AWS account will be cleaned automatically
If you are using your own AWS account:
Please use these steps when you are done with the lab
Cleaning up the CloudFormation Stack The following instructions will remove the resources that you have created in this lab.
Sign in to the AWS Management Console and navigate to the AWS CloudFormation console - https://console.</description></item><item><title>References &amp; useful resources</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/8_resources/</link><pubDate>Wed, 18 Nov 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/8_resources/</guid><description>AWS re:Invent 2019: Introducing The Amazon Buildersâ€™ Library (DOP328) Amazon Builders&amp;rsquo; Library: Workload isolation using shuffle sharding AWS re:Invent 2018: Architecture Patterns for Multi-Region Active-Active Applications (ARC209-R2) AWS re:Invent 2018: How AWS Minimizes the Blast Radius of Failures (ARC338) AWS re:Invent 2019: Innovation and operation of the AWS global network infrastructure (NET339) AWS Well-Architected Best Practices Use bulkhead architectures : Like the bulkheads on a ship, this pattern ensures that a failure is contained to a small subset of requests/users so that the number of impaired requests is limited, and most can continue without error.</description></item></channel></rss>