<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mitigate_failure on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/tags/mitigate_failure/</link><description>Recent content in mitigate_failure on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 24 Apr 2020 11:16:08 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/tags/mitigate_failure/index.xml" rel="self" type="application/rss+xml"/><item><title>Level 300: Implementing Health Checks and Managing Dependencies to improve Reliability</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_health_checks_and_dependencies/</link><pubDate>Fri, 24 Apr 2020 11:16:08 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_health_checks_and_dependencies/</guid><description>Author Seth Eliot, Principal Reliability Solutions Architect, AWS Well-Architected Introduction This hands-on lab will guide you through the steps to improve reliability of a service by decoupling service dependencies, using health checks, and demonstrating when to use fail-open and fail-closed behaviors.
The skills you learn will help you build resilient workloads in alignment with the AWS Well-Architected Framework Amazon Builders&amp;rsquo; Library This lab additionally illustrates best practices as described in the Amazon Builders&amp;rsquo; Library article: Implementing health checks Goals After you have completed this lab, you will be able to:</description></item><item><title>Level 300: Fault Isolation with Shuffle Sharding</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/</link><pubDate>Mon, 07 Dec 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_fault_isolation_with_shuffle_sharding/</guid><description>Author Mahanth Jayadeva, Solutions Architect, AWS Well-Architected Introduction In this lab, you will become familiar with the concept of shuffle sharding and how it can help reduce blast radius during failures. You will learn how to distribute user requests to resources in a combinatorial way so that any failures affect only a small subset of users. &amp;ldquo;Users&amp;rdquo; in this case refers to any source of requests to your workload. This can be other services that call your workload, in addition to actual human users.</description></item></channel></rss>