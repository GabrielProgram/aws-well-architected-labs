AWSTemplateFormatVersion: "2010-09-09"
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Common Parameters Configuration"
        Parameters: 
          - GovernanceAccountId
          - ResourcePrefix
      - 
        Label: 
          default: "Governance Account specific parameters (fill only on Governance Account)"
        Parameters: 
          - SourceAccountIds
      - 
        Label: 
          default: "[ADVANCED] for deployment outside us-east-1"
        Parameters: 
          - BucketRegion
      - 
        Label: 
          default: "[ADVANCED][US-EAST-1 ONLY] for deployment in dedicated Governance Account"
        Parameters: 
          - CreateCUR
    ParameterLabels:
      GovernanceAccountId:
        default: "Enter the AWS Account Id where CID Quicksight Dashboard will be deployed"
      ResourcePrefix:
        default: "Prefix used for all named resources, including S3 Bucket."
      BucketRegion:
        default: >
          Please specify the region where you want the bucket to be deployed. 
          Two deployment of this cfn is mendatory, first on the region of the bucket and then on us-east-1 region.
      SourceAccountIds: 
        default: "List all Linked Account / Payer Account you whant to group CUR Data from as a comma separated list 12345678912,98745612312,...."
      
Parameters:

  ##
  # Common params
  ##

  GovernanceAccountId:
    Type: String
    Description: Governance account id
    AllowedPattern: '\d{12}'
  ResourcePrefix:
    Type: String
    Default: "centralized-cur"
    Description: "resource prefix"
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]{1,61}[a-z0-9]+$"
  BucketRegion:
    Type: String
    Description: Bucket region where you want your CUR data to be store.
    Default: us-east-1
  CreateCUR:
    Type: String
    Description: ONLY AVAILABLE ON US-EAST-1 - Whenever or not create LocalCUR
    AllowedValues:
      - "True"
      - "False"
    Default: "True"
  
  ##
  # Governance specific params
  ##

  SourceAccountIds:
    Type: CommaDelimitedList
    Description: List of AWS AccountId authorizing s3 replication

Conditions:
  
  IsGovernanceAccount: 
    Fn::Equals: 
      - Ref: GovernanceAccountId 
      - Ref: AWS::AccountId
  
  IsLinkedAccount:
    Fn::Not:
     - 
      Fn::Equals: 
        - Ref: GovernanceAccountId 
        - Ref: AWS::AccountId

  IsNorthVirginia:
    Fn::Equals:
      - Ref: AWS::Region
      - 'us-east-1'

  IsBucketRegion:
    Fn::Equals:
      - Ref: AWS::Region
      - Ref: BucketRegion

  DeployLinked: 
    Fn::And:
      - !Condition IsLinkedAccount
      - !Condition IsBucketRegion
      
  DeployGovernance:
    Fn::And:
      - !Condition IsGovernanceAccount
      - !Condition IsBucketRegion

  DeployAnalytics:
    Fn::Or:
      - !Condition DeployLinked
      - !Condition DeployGovernance

  CUREnable:
    Fn::Equals:
      - Ref: CreateCUR
      - "True"

  DeployCUR:
    Fn::And:
      - !Condition CUREnable
      - !Condition IsNorthVirginia

Resources:

###
# Variables
##
#
# GovernanceBucketName: ${GovernanceAccountId}-${ResourcePrefix}-shared
# GlueDatabaseName: ${ResourcePrefix}-db
# AthenaWorkGroup: ${ResourcePrefix}-wk
#
# LinkedBucketName: ${AWS::AccountId}-${ResourcePrefix}-local
#
#
#  LambdaAnalytics: ${ResourcePrefix}-CID-Analytics
#


###########################################################################
# Governance Account Part
###########################################################################

####
# S3 Bucket which store all CUR from Accounts 
####

  S3:
    Type: AWS::S3::Bucket
    Condition: DeployGovernance
    Properties:
      BucketName:
        Fn::Sub: "${GovernanceAccountId}-${ResourcePrefix}-shared"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month 

              
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: DeployGovernance
    Properties:
      Bucket: 
        Ref: S3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action: 
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action: 
              - s3:PutObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/*'

          - Sid: AllowReplicationWrite
            Effect: Allow
            Principal:
              AWS:
                Ref: SourceAccountIds
            Action: 
              - s3:ReplicateDelete
              - s3:ReplicateObject
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/*'
          - Sid: AllowReplicationRead
            Effect: Allow
            Principal:
              AWS:
                Ref: SourceAccountIds
            Action: 
              - s3:List*
              - s3:GetBucketVersioning
              - s3:PutBucketVersioning
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}'


####
# Glue
####

  GlueDatabase:
    Type: "AWS::Glue::Database"
    Condition: DeployGovernance
    Properties:
      DatabaseInput:
        Name: 
          Fn::Sub: "${ResourcePrefix}-db"
      CatalogId: !Ref AWS::AccountId

  GlueCrawler:
    Type: 'AWS::Glue::Crawler'
    Condition: DeployGovernance
    Properties:
      Name: 
        Fn::Sub: "${ResourcePrefix}-datacrawler"
      Description: A recurring crawler that keeps your CUR table in Athena up-to-date.
      Role: 
        Fn::GetAtt: CrawlerRole.Arn
      DatabaseName: 
        Ref: GlueDatabase
      Targets:
        S3Targets:
          - Path: 
              Fn::Sub: 's3://${S3}/cost-usage-reports/'
            Exclusions:
              - '**.json'
              - '**.yml'
              - '**.sql'
              - '**.csv'
              - '**.gz'
              - '**.zip'
              - '**/cost_and_usage_data_status/*'
              - aws-programmatic-access-test-object
      SchemaChangePolicy:
        DeleteBehavior: DELETE_FROM_DATABASE
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      Schedule:
        ScheduleExpression: cron(0 2 * * ? *)
      Configuration: "{
          \"Version\":1.0,
          \"Grouping\":{\"TableGroupingPolicy\": \"CombineCompatibleSchemas\" },
          \"CrawlerOutput\":{\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}
        }"

  CrawlerRole:
    Type: 'AWS::IAM::Role'
    Condition: DeployGovernance
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path:
        Fn::Sub: /${ResourcePrefix}/
      ManagedPolicyArns:
        - Fn::Sub: 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: AWSCURCrawlerComponentFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/crawlers/*"
              - Effect: Allow
                Action:
                  - 'glue:UpdateDatabase'
                  - 'glue:UpdatePartition'
                  - 'glue:CreateTable'
                  - 'glue:UpdateTable'
                  - 'glue:ImportCatalogToGlue' # TODO
                Resource:
                  # Catalog Access
                  - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  # Database Access
                  - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabase}
                  # Tables Access
                  - Fn::Sub: arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabase}/*
              
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: 
                  Fn::Sub: 'arn:${AWS::Partition}:s3:::${S3}/cost-usage-reports/*'


####
# Athena
####

  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Condition: DeployGovernance
    Properties:
      Name: 
        Fn::Sub: "${ResourcePrefix}-wk"
      Description: 
        Fn::Sub: Used for ${ResourcePrefix}
      State: ENABLED
      WorkGroupConfiguration:
        #BytesScannedCutoffPerQuery: 200000000
        EnforceWorkGroupConfiguration: true
        #PublishCloudWatchMetricsEnabled: false
        #RequesterPaysEnabled: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation:
            Fn::Sub: 's3://${S3}/athena-query-results/'

###########################################################################
# Linked Account Part
###########################################################################

####
# S3 Bucket with replication 
####

  LinkedS3:
    Type: AWS::S3::Bucket
    Condition: DeployLinked
    Properties:
      BucketName:
        Fn::Sub: ${AWS::AccountId}-${ResourcePrefix}-local
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt CrossRegionReplicationRole.Arn
        Rules:
          -
            Destination:
              Bucket:
                Fn::Sub: "arn:${AWS::Partition}:s3:::${GovernanceAccountId}-${ResourcePrefix}-shared"
              StorageClass: STANDARD
            Id: ReplicationRule1
            Prefix: ""
            Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Object&Version Expiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 32 # 1 month 
            ExpirationInDays: 64 # 2 months
              
  LinkedS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: DeployLinked
    Properties:
      Bucket: !Ref LinkedS3
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTLS12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local'
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local/*'
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          - Sid: AllowOnlyHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local'
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local/*'
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowReadBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action: 
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local'
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local/*'
          - Sid: AllowWriteBilling
            Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action: 
              - s3:PutObject
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local/*'
  
  CrossRegionReplicationRole:
    Condition: DeployLinked
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "s3.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CrossRegionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource: !Sub "arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                Resource: !Sub "arn:${AWS::Partition}:s3:::${AWS::AccountId}-${ResourcePrefix}-local/*"
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:GetObjectVersionTagging
                Resource: 
                  Fn::Sub: "arn:${AWS::Partition}:s3:::${GovernanceAccountId}-${ResourcePrefix}-shared/cost-usage-reports/${AWS::AccountId}*"

####
# Local CUR 
####

  LocalCur:
    Type: AWS::CUR::ReportDefinition
    Condition: DeployCUR
    Properties:
      AdditionalArtifacts:
        - ATHENA
      AdditionalSchemaElements: 
        - RESOURCES
      Compression: Parquet
      Format: Parquet
      RefreshClosedReports: True
      ReportName: 
        Ref: AWS::AccountId
      ReportVersioning: OVERWRITE_REPORT
      S3Bucket:
        Fn::If:
          - IsGovernanceAccount
          - Fn::If:
            - DeployGovernance
            - Ref: S3
            - Fn::Sub: ${GovernanceAccountId}-${ResourcePrefix}-shared
          - Fn::If:
              - DeployLinked
              - Ref: LinkedS3
              - Fn::Sub: ${AWS::AccountId}-${ResourcePrefix}-local
      S3Prefix: "cost-usage-reports"
      S3Region: 
        Ref: BucketRegion
      TimeUnit: HOURLY


###########################################################################
# Analytics: used by CID team to track adoption, by retrieving AWS AccountId
###########################################################################


  LambdaCIDAnalyticsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ResourcePrefix}-CID-Analytics"
  
  CIDLambdaAnalyticsRole: #Execution role for the custom resource CIDLambdaAnalyticsExecutor
    Type: AWS::IAM::Role
    Condition: DeployAnalytics
    Properties:
      Path: 
        Fn::Sub: /${ResourcePrefix}/
      RoleName: CID-Analytics
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ExecutionDefault"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-CID-Analytics:*:*"

  CIDLambdaAnalytics: 
    Type: AWS::Lambda::Function
    Condition: DeployAnalytics
    Properties:
      Runtime: python3.9
      FunctionName:
        Fn::Sub: ${ResourcePrefix}-CID-Analytics
      Handler: index.lambda_handler
      MemorySize: 128
      Role: 
        Fn::GetAtt: CIDLambdaAnalyticsRole.Arn
      Timeout: 15
      Environment:
        Variables:
          API_ENDPOINT: https://okakvoavfg.execute-api.eu-west-1.amazonaws.com/
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse
          import urllib3
          import uuid

          http = urllib3.PoolManager()
          endpoint=os.environ["API_ENDPOINT"]
          account_id=boto3.client("sts").get_caller_identity()["Account"]
              
          def execute_request(action,dashboard_id,via_key):
              try:
                  message=None
                  payload={'dashboard_id': dashboard_id, 'account_id': account_id, via_key: 'CFN'}
                  encoded_data = json.dumps(payload).encode('utf-8')
                  r = http.request(action,endpoint,body=encoded_data,headers={'Content-Type': 'application/json'})
                  if r.status!=200:
                      message=f"This will not fail the deployment. There has been an issue logging action {action}  for dashboard {dashboard_id} and account {account_id}, server did not respond with a 200 response,actual  status: {r.status}, response data {r.data.decode('utf-8')}. This issue will be ignored"
              except urllib3.exceptions.HTTPError as e:
                message=f"Issue logging action {action}  for dashboard {dashboard_id} and account {account_id}, due to a urllib3 exception {str(e)} . This issue will be ignored"
              return message
              

          def register_deployment(action,dashboards):
              message=f"Succesfully logged  {action} for {dashboards}"
              for dashboard_id in dashboards:
                  if action == 'CREATE':
                      message=execute_request('PUT',dashboard_id,'created_via')
                  elif action == 'UPDATE':
                      message=execute_request('PATCH',dashboard_id,'updated_via')
                  elif action == 'DELETE':
                      message=execute_request('DELETE',dashboard_id,'deleted_via')
                  if message is None:
                      message=f"Succesfully logged  {action} for {dashboards} "
              #Do not stop deployment if we're not able to succesfully record this deployment, still return true
              return ("True",message)


          def lambda_handler(event, context):
              if event['RequestType'] == 'Create':
                  res, reason = register_deployment('CREATE',event['ResourceProperties']['DeploymentType'])
              elif event['RequestType'] == 'Update':
                  res, reason = register_deployment('UPDATE',event['ResourceProperties']['DeploymentType'])
              elif event['RequestType'] == 'Delete':
                  res, reason = register_deployment('DELETE',event['ResourceProperties']['DeploymentType'])
              else:
                  res = False
                  reason = "Unknown operation: " + event['RequestType']
              
              response_data = {'Reason': reason}
              print(response_data)
              if 'PhysicalResourceId' in event.keys() and event['PhysicalResourceId'] is not None:
                  physicalResourceId=event['PhysicalResourceId']
              else: 
                  physicalResourceId=str(uuid.uuid1())
              if res:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId )
              else:
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physicalResourceId )

  CIDLambdaAnalyticsExecutor:  
    Type: Custom::CIDLambdaAnalyticsExecutor
    Condition: DeployAnalytics
    Properties:
      ServiceToken: !GetAtt CIDLambdaAnalytics.Arn
      DeploymentType:
        - Fn::If:
          - DeployGovernance
          - "cid-cur-aggregator"
          - "cid-cur-replication"

Outputs:
  GovernanceBucketName:
    Description: Bucket where to store and aggregate CUR
    Value: 
      Fn::Sub: ${GovernanceAccountId}-${ResourcePrefix}-shared
  GlueDatabaseName:
    Description: Glue Database referencing CUR File
    Value: 
      Fn::Sub: ${ResourcePrefix}-db
  AthenaWorkGroup:
    Description: Athena WorkGroup which is used to query GlueDB
    Value: 
      Fn::Sub: ${ResourcePrefix}-wk
  LocalAccountBucket:
    Description: Local Bucket Name which replicate objects to centralized bucket
    Value: 
      Fn::Sub: ${AWS::AccountId}-${ResourcePrefix}-local